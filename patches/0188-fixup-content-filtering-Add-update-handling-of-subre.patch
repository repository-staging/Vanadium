From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: fgei <fgei@gmail.com>
Date: Sun, 14 Jul 2024 02:58:02 +0000
Subject: [PATCH] fixup! content-filtering: Add update handling of subresource
 filter component from config apk

---
 .../subresource_filter/RulesetUpdater.java    | 33 +++++++++++++++++--
 .../android/ruleset_updater.cc                | 14 ++++++--
 .../android/ruleset_updater.h                 |  2 +-
 3 files changed, 43 insertions(+), 6 deletions(-)

diff --git a/chrome/browser/subresource_filter/android/java/src/org/chromium/chrome/browser/subresource_filter/RulesetUpdater.java b/chrome/browser/subresource_filter/android/java/src/org/chromium/chrome/browser/subresource_filter/RulesetUpdater.java
index 06b2010fcfe9c..69bab8915e683 100644
--- a/chrome/browser/subresource_filter/android/java/src/org/chromium/chrome/browser/subresource_filter/RulesetUpdater.java
+++ b/chrome/browser/subresource_filter/android/java/src/org/chromium/chrome/browser/subresource_filter/RulesetUpdater.java
@@ -7,13 +7,23 @@
 
 package org.chromium.chrome.browser.subresource_filter;
 
+import android.content.Context;
+
+import org.chromium.base.ContextUtils;
 import org.chromium.base.Log;
 import org.chromium.components.subresource_filter.SubresourceFilterFetching;
 import org.jni_zero.JNINamespace;
 import org.jni_zero.NativeMethods;
 
+import com.google.protobuf.ByteString;
+
 import app.vanadium.config.VanadiumConfParser;
 
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+
 @JNINamespace("subresource_filter")
 public class RulesetUpdater {
 
@@ -55,17 +65,39 @@ public class RulesetUpdater {
         if (unindexedRulesetData == null) {
             return;
         }
+        Context ctx = ContextUtils.getApplicationContext();
+        File unindexedContentFile = new File(ctx.getCacheDir(), UNINDEXED_RULESET_FILE_NAME);
+        if (unindexedContentFile.exists()) {
+            unindexedContentFile.delete();
+        }
+
+        try {
+            if (unindexedContentFile.createNewFile()) {
+                try (FileOutputStream out = new FileOutputStream(unindexedContentFile)) {
+                    ByteString unindexedRulesetByteStr = ByteString.copyFrom(unindexedRulesetData);
+                    unindexedRulesetByteStr.writeTo(out);
+                }
+            } else {
+                Log.i(TAG, "Creation of new file for parsing is unsuccessful");
+                return;
+            }
+        } catch (IOException e) {
+            Log.w(TAG, "", e);
+            return;
+        }
 
-        RulesetUpdaterJni.get().update(Long.toString(unindexedContentVersionCode));
+        String unindexedContentFilePath = unindexedContentFile.getAbsolutePath();
+        RulesetUpdaterJni.get().update(Long.toString(unindexedContentVersionCode), unindexedContentFilePath);
     }
 
+    private static final String UNINDEXED_RULESET_FILE_NAME = "unindexed_subresource_filter";
     public static String version() {
         return RulesetUpdaterJni.get().version();
     }
 
     @NativeMethods
     interface Natives {
-        void update(String unindexedContentVersion);
+        void update(String unindexedContentVersion, String unindexedContentPath);
         String version();
     }
 }
diff --git a/chrome/browser/subresource_filter/android/ruleset_updater.cc b/chrome/browser/subresource_filter/android/ruleset_updater.cc
index 6dc7ccc340cbf..67fbd18ca6f21 100644
--- a/chrome/browser/subresource_filter/android/ruleset_updater.cc
+++ b/chrome/browser/subresource_filter/android/ruleset_updater.cc
@@ -17,16 +17,24 @@ using base::android::ScopedJavaLocalRef;
 namespace subresource_filter {
 
 static void JNI_RulesetUpdater_Update(JNIEnv *env,
-    const JavaParamRef<jstring>& junindexed_content_version) {
+    const JavaParamRef<jstring>& junindexed_content_version,
+    const JavaParamRef<jstring>& junindexed_ruleset_path) {
   const std::string unindexed_content_version =
       ConvertJavaStringToUTF8(env, junindexed_content_version);
-  UpdateRuleset(unindexed_content_version);
+  const std::string unindexed_ruleset_path =
+      ConvertJavaStringToUTF8(env, junindexed_ruleset_path);
+
+  UpdateRulesetFromConfig(unindexed_content_version, unindexed_ruleset_path);
 }
 
 // static
-void UpdateRuleset(std::string version) {
+void UpdateRulesetFromConfig(std::string version, std::string path) {
   UnindexedRulesetInfo ruleset_info;
   ruleset_info.content_version = version;
+  // We know that unindexed_ruleset_path is UTF8 since it is the output of
+  // ConvertJavaStringToUTF8().
+  ruleset_info.ruleset_path =
+      base::FilePath::FromUTF8Unsafe(path);
 
   RulesetService *ruleset_service =
       g_browser_process->subresource_filter_ruleset_service();
diff --git a/chrome/browser/subresource_filter/android/ruleset_updater.h b/chrome/browser/subresource_filter/android/ruleset_updater.h
index d2260b5e00f6e..052be3818f902 100644
--- a/chrome/browser/subresource_filter/android/ruleset_updater.h
+++ b/chrome/browser/subresource_filter/android/ruleset_updater.h
@@ -8,7 +8,7 @@
 #include <string>
 
 namespace subresource_filter {
-void UpdateRuleset(std::string version);
+void UpdateRulesetFromConfig(std::string version, std::string path);
 } // namespace subresource_filter
 
 #endif // CHROME_BROWSER_SUBRESOURCE_FILTER_ANDROID_RULESET_UPDATER_H_
\ No newline at end of file
