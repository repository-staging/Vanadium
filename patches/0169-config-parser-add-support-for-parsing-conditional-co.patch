From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: fgei <fgei@gmail.com>
Date: Wed, 10 Apr 2024 15:56:22 +0000
Subject: [PATCH] config-parser: add support for parsing conditional components

---
 .../config/VanadiumConfConditionals.java      | 24 ++++++++++
 .../vanadium/config/VanadiumConfParser.java   | 48 ++++++++++++++++++-
 2 files changed, 70 insertions(+), 2 deletions(-)

diff --git a/vanadium/android_config/proto/java/src/app/vanadium/config/VanadiumConfConditionals.java b/vanadium/android_config/proto/java/src/app/vanadium/config/VanadiumConfConditionals.java
index ec1be4d92d378..96d954b892387 100644
--- a/vanadium/android_config/proto/java/src/app/vanadium/config/VanadiumConfConditionals.java
+++ b/vanadium/android_config/proto/java/src/app/vanadium/config/VanadiumConfConditionals.java
@@ -1,8 +1,15 @@
 package app.vanadium.config;
 
+import android.util.Log;
+
+import app.vanadium.config.proto.VanadiumConfigProto.Component.ComponentCondition;
+
 public final class VanadiumConfConditionals {
 
+    public static final String TAG = "cr_VanadiumConfConditionals";
+
     public interface ConditionSupplier {
+        boolean isUserAcceptLanguageIncluded(ComponentCondition componentCondition);
     }
 
     private static volatile ConditionSupplier conditionSupplier;
@@ -11,6 +18,23 @@ public final class VanadiumConfConditionals {
         return VanadiumConfConditionals.conditionSupplier;
     }
 
+    static boolean isConditionSatisfied(ComponentCondition condition) {
+        if (getConditionSupplier() == null) {
+            Log.d(TAG, "Conditional component not supported");
+            return false;
+        }
+
+        if (condition == null || ComponentCondition.getDefaultInstance().equals(condition)) {
+            return false;
+        }
+
+        if (!getConditionSupplier().isUserAcceptLanguageIncluded(condition)) {
+            return false;
+        }
+
+        return true;
+    }
+
     public static void setBrowserConditionals(ConditionSupplier conditionSupplier) {
         VanadiumConfConditionals.conditionSupplier = conditionSupplier;
     }
diff --git a/vanadium/android_config/proto/java/src/app/vanadium/config/VanadiumConfParser.java b/vanadium/android_config/proto/java/src/app/vanadium/config/VanadiumConfParser.java
index d67d2419dfe8a..672e4310e1b40 100644
--- a/vanadium/android_config/proto/java/src/app/vanadium/config/VanadiumConfParser.java
+++ b/vanadium/android_config/proto/java/src/app/vanadium/config/VanadiumConfParser.java
@@ -26,7 +26,9 @@ import java.util.zip.ZipEntry;
 import java.util.zip.ZipFile;
 
 import app.vanadium.config.proto.VanadiumConfigProto.Component;
+import app.vanadium.config.proto.VanadiumConfigProto.Component.AdditionalComponent;
 import app.vanadium.config.proto.VanadiumConfigProto.Component.ComponentApkSpec;
+import app.vanadium.config.proto.VanadiumConfigProto.Component.ComponentCondition;
 import app.vanadium.config.proto.VanadiumConfigProto.Component.ComponentType;
 import app.vanadium.config.proto.VanadiumConfigProto.Config;
 import app.vanadium.config.proto.VanadiumConfigProto.Configs;
@@ -77,6 +79,7 @@ public final class VanadiumConfParser {
         private final String componentFileName;
         private final String componentApkPkgName;
         private final String componentApkFilePath;
+        private final List<AdditionalComponent> additionalComponents;
 
         private volatile Future<byte[]> componentByteArray;
         private volatile byte[] cachedComponentByteArray;
@@ -87,7 +90,8 @@ public final class VanadiumConfParser {
             this.componentFileName = component.getComponentFileName();
             this.componentApkPkgName = component.getApkSpec().getPkgName();
             this.componentApkFilePath = apkFilePath;
-            this.componentByteArray = executor.submit(this::getByteArrayForComponentInternal);
+            this.additionalComponents = component.getAdditionalComponentsList();
+            this.componentByteArray = executor.submit(this::getByteArrayForMainComponentInternal);
         }
 
         private static final ParsedComponent EMPTY = new ParsedComponent(Component.getDefaultInstance(), null);
@@ -103,6 +107,42 @@ public final class VanadiumConfParser {
                 return null;
             }
 
+            byte[] res = getByteArrayForMainComponent();
+            for (AdditionalComponent additionalComponent: additionalComponents) {
+                if (additionalComponent.getConditionsCount() != 0) {
+                    boolean isConditionSatisfied = false;
+                    for (ComponentCondition condition : additionalComponent.getConditionsList()) {
+                        if (VanadiumConfConditionals.isConditionSatisfied(condition)) {
+                            isConditionSatisfied = true;
+                            break;
+                        }
+                    }
+
+                    if (!isConditionSatisfied) {
+                        continue;
+                    }
+                }
+
+                byte[] additionalRes = getByteArrayForComponentInternalInFile(
+                        additionalComponent.getComponentFileName());
+                if (res == null) {
+                    res = additionalRes;
+                } else if (additionalRes != null) {
+                    byte[] newRes = new byte[res.length + additionalRes.length];
+                    System.arraycopy(res, 0, newRes, 0, res.length);
+                    System.arraycopy(additionalRes, 0, newRes, res.length, additionalRes.length);
+                    res = newRes;
+                }
+            }
+
+            return res;
+        }
+
+        private byte[] getByteArrayForMainComponentInternal() {
+            return getByteArrayForComponentInternalInFile(componentFileName);
+        }
+
+        private byte[] getByteArrayForComponentInternalInFile(String componentFileName) {
             try (ZipFile f = new ZipFile(componentApkFilePath)) {
                 ZipEntry e = f.getEntry(componentFileName);
                 if (e == null) {
@@ -124,6 +164,10 @@ public final class VanadiumConfParser {
         }
 
         private byte[] getComponentByteArray() {
+            return getByteArrayForComponentInternal();
+        }
+
+        private byte[] getByteArrayForMainComponent() {
             byte[] curComponentByteArray = cachedComponentByteArray;
             if (curComponentByteArray != null) {
                 if (ConfigInfo.IS_DEBUG) {
@@ -135,7 +179,7 @@ public final class VanadiumConfParser {
             try {
                 curComponentByteArray = this.componentByteArray.get();
                 if (componentByteArray.isCancelled()) {
-                    componentByteArray = executor.submit(this::getByteArrayForComponentInternal);
+                    componentByteArray = executor.submit(this::getByteArrayForMainComponentInternal);
                 }
                 cachedComponentByteArray = curComponentByteArray;
                 return curComponentByteArray;
